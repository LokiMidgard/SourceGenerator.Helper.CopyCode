using BenchmarkDotNet.Attributes;

using F0.CodeAnalysis.CSharp.Benchmarking;

namespace SourceGenerator.Helper.CopyCode.Benchmarks;

public class CopyGeneratorBenchmarks {
    private readonly CSharpIncrementalGeneratorBenchmark<CopyGenerator> benchmark = new();

    [GlobalSetup]
    public void Setup() {
        string code = @"
namespace Nested.Namespace;

[SourceGenerator.Helper.CopyCode.Copy]
internal static partial class GlobalNamespaceGreeter
{
	public static string GetHelloWorld() => ""Foo"";
}
";

        benchmark.Initialize(new CSharpIncrementalGeneratorBenchmarkInitializationContext {
            Source = code,
        });
    }

    [Benchmark]
    public object Generate() {
        return benchmark.Invoke();
    }

    [GlobalCleanup]
    public void Cleanup() {
        string attribute = @"// <auto-generated/>
#nullable enable

namespace SourceGenerator.Helper.CopyCode
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""SourceGenerator.Helper.CopyCode"", ""1.0.0.0"")]
	[global::System.AttributeUsage(global::System.AttributeTargets.Enum | global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct | global::System.AttributeTargets.Interface, AllowMultiple = false)]
	internal sealed class CopyAttribute : global::System.Attribute
	{
	}
}
";

        string generated = @"// <auto-generated/>
#nullable enable
namespace SourceGenerator.Helper.CopyCode;
internal  static partial class Copy {
    public const string NestedNamespaceGlobalNamespaceGreeter = """"""
        // <auto-generated/>
        #nullable enable
        
        namespace global::Nested.Namespace;
        internal static partial class GlobalNamespaceGreeter
        {
            public static string GetHelloWorld() => ""Foo"";
        }
        """""";
}
";

        benchmark.Inspect(new CSharpIncrementalGeneratorBenchmarkInspectionContext {
            Source = ("CopyAttribute.g.cs", attribute),
            AdditionalSources = { ("Nested.Namespace.GlobalNamespaceGreeter.Copy.g.cs", generated) },
        });
    }
}
