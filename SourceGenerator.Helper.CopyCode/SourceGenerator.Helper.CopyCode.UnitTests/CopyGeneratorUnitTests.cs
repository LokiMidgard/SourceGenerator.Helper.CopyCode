using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using VerifyCS = SourceGenerator.Helper.CopyCode.UnitTests.Verifiers.CSharpSourceGeneratorVerifier<SourceGenerator.Helper.CopyCode.CopyGenerator>;

namespace SourceGenerator.Helper.CopyCode.UnitTests;
[TestClass]
public class CopyGeneratorUnitTests {
    private const string Attribute = @"// <auto-generated/>
#nullable enable

namespace SourceGenerator.Helper.CopyCode
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""SourceGenerator.Helper.CopyCode"", ""0.0.1.0"")]
	[global::System.AttributeUsage(global::System.AttributeTargets.Enum | global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct | global::System.AttributeTargets.Interface, AllowMultiple = false)]
	internal sealed class CopyAttribute : global::System.Attribute
	{
	}
}
";
    private const string global = @"// <auto-generated/>
#nullable enable
namespace SourceGenerator.Helper.CopyCode;
internal  static partial class Copy {
    public const string GlobalNamespaceGreeter = """"""
        // <auto-generated/>
        #nullable enable
        
        internal static partial class GlobalNamespaceGreeter
        {
            public static string GetHelloWorld() => ""Foo"";
        }
        """""";
}
";

    private const string nestedType = @"// <auto-generated/>
#nullable enable
namespace SourceGenerator.Helper.CopyCode;
internal  static partial class Copy {
    public const string NestedFooGlobalNamespaceGreeter = """"""
        // <auto-generated/>
        #nullable enable
        
        namespace Nested;
        partial class Foo {
            internal static partial class GlobalNamespaceGreeter
            {
                public static string GetHelloWorld() => ""Foo"";
            }
        }
        """""";
}
";

    private const string nestedNamespace = @"// <auto-generated/>
#nullable enable
namespace SourceGenerator.Helper.CopyCode;
internal  static partial class Copy {
    public const string NestedNamespaceGlobalNamespaceGreeter = """"""
        // <auto-generated/>
        #nullable enable
        
        namespace Nested.Namespace;
        internal static partial class GlobalNamespaceGreeter
        {
            public static string GetHelloWorld() => ""Foo"";
        }
        """""";
}
";

    private const string inlineNameSpace = @"// <auto-generated/>
#nullable enable
namespace SourceGenerator.Helper.CopyCode;
internal  static partial class Copy {
    public const string NestedNamespaceGlobalNamespaceGreeter = """"""
        // <auto-generated/>
        #nullable enable
        
        namespace Nested.Namespace;
        internal static partial class GlobalNamespaceGreeter
        {
            public static string GetHelloWorld() => ""Foo"";
        }
        """""";
}
";

    [TestMethod]
    public async Task WithMultpleAttributes() {
        string code = @"
using System;


[SourceGenerator.Helper.CopyCode.Copy]
internal static partial class GlobalNamespaceGreeter
{
	public static string GetHelloWorld() => ""Foo"";
}

namespace Nested{
    namespace Namespace{
        [SourceGenerator.Helper.CopyCode.Copy]
        internal static partial class GlobalNamespaceGreeter
        {
	        public static string GetHelloWorld() => ""Foo"";
        }
    }
}

namespace Nested{
    internal partial class Foo{
        [SourceGenerator.Helper.CopyCode.Copy]
        internal static partial class GlobalNamespaceGreeter
        {
	        public static string GetHelloWorld() => ""Foo"";
        }
    }
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("CopyAttribute.g.cs", Attribute),
            ("GlobalNamespaceGreeter.Copy.g.cs", global),
            ("Nested.Namespace.GlobalNamespaceGreeter.Copy.g.cs", nestedNamespace),
            ("Nested.Foo.GlobalNamespaceGreeter.Copy.g.cs", nestedType));
    }

    [TestMethod]
    public async Task WithGlobalNameSpace() {
        string code = @"
using System;


[SourceGenerator.Helper.CopyCode.Copy]
internal static partial class GlobalNamespaceGreeter
{
	public static string GetHelloWorld() => ""Foo"";
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("CopyAttribute.g.cs", Attribute),
            ("GlobalNamespaceGreeter.Copy.g.cs", global)
 );
    }

    [TestMethod]
    public async Task InlineNestedNamespace() {
        string code = @"
using System;

namespace Nested.Namespace;

[SourceGenerator.Helper.CopyCode.Copy]
internal static partial class GlobalNamespaceGreeter
{
	public static string GetHelloWorld() => ""Foo"";
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("CopyAttribute.g.cs", Attribute),
            ("Nested.Namespace.GlobalNamespaceGreeter.Copy.g.cs", inlineNameSpace)
 );
    }
    [TestMethod]
    public async Task ExplicitNestedNamespace() {
        string code = @"
using System;

namespace Nested{
    namespace Namespace{
        [SourceGenerator.Helper.CopyCode.Copy]
        internal static partial class GlobalNamespaceGreeter
        {
	        public static string GetHelloWorld() => ""Foo"";
        }
    }
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("CopyAttribute.g.cs", Attribute),
            ("Nested.Namespace.GlobalNamespaceGreeter.Copy.g.cs", nestedNamespace)
 );
    }
    [TestMethod]
    public async Task NestedTypeNamespace() {
        string code = @"
using System;

namespace Nested{
    internal partial class Foo{
        [SourceGenerator.Helper.CopyCode.Copy]
        internal static partial class GlobalNamespaceGreeter
        {
	        public static string GetHelloWorld() => ""Foo"";
        }
    }
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("CopyAttribute.g.cs", Attribute),
            ("Nested.Foo.GlobalNamespaceGreeter.Copy.g.cs", nestedType)
 );
    }

    [TestMethod]
    public async Task MultipleAttributes() {
        string code = @"
using System;

namespace Nested{
    [System.Obsolete]
    [System.ComponentModel.Browsable(false)]
    [SourceGenerator.Helper.CopyCode.Copy]
    [System.Serializable]
    internal static partial class GlobalNamespaceGreeter
    {
	    public static string GetHelloWorld() => ""Foo"";
    }
}
";
        string expected = @"// <auto-generated/>
#nullable enable
namespace SourceGenerator.Helper.CopyCode;
internal  static partial class Copy {
    public const string NestedGlobalNamespaceGreeter = """"""
        // <auto-generated/>
        #nullable enable
        
        namespace Nested;
        [System.Serializable]
        internal static partial class GlobalNamespaceGreeter
        {
            public static string GetHelloWorld() => ""Foo"";
        }
        """""";
}
";

        await VerifyCS.VerifyGeneratorAsync(code, ("CopyAttribute.g.cs", Attribute),
                ("Nested.GlobalNamespaceGreeter.Copy.g.cs", expected)
     );
    }

    [Ignore] // this test is for easier deebugging
    [TestMethod]
    public async Task SimpleTest() {
        string code = """
                                
                using System;
                using System.Collections.Generic;
                using System.Text;
                using System.Linq;

                namespace AutoInvoke.Generator;

                [SourceGenerator.Helper.CopyCode.Copy]
                [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = true)]
                [System.Diagnostics.Conditional("AutoNotifyGenerator_DEBUG")]
                sealed class FindAndInvokeAttribute : Attribute {
                #pragma warning disable IDE0060 // Remove unused parameter
                #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
                    // See the attribute guidelines at 
                    //  http://go.microsoft.com/fwlink/?LinkId=85236
                    readonly string positionalString;

                    // This is a positional argument
                    public FindAndInvokeAttribute() {

                    }

                    public FindAndInvokeAttribute(string pattern) {

                    }

                    public FindAndInvokeAttribute(Type type) {

                    }

                    /// <summary>
                    /// The maximum number of calls to emmit.
                    /// </summary>
                    public int Limit { get; set; }

                    public string MethodName { get; set; }

                    public bool CallForAbstractClasses { get; set; }
                    public bool CallForInterfaces { get; set; }
                    public bool CallForStructs { get; set; }
                    public bool CallForClasses { get; set; }
                    public bool CallForRecords { get; set; }

                #pragma warning restore IDE0060 // Remove unused parameter
                #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
                }
                
                """;

        await VerifyCS.VerifyGeneratorAsync(code, ("CopyAttribute.g.cs", Attribute),
                ("Nested.GlobalNamespaceGreeter.Copy.g.cs", "")
     );
    }
}

